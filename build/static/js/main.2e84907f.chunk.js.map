{"version":3,"sources":["Assets/chime.wav","components/speech.jsx","App.js","reportWebVitals.js","index.js"],"names":["Speech","useState","currentText","setCurrentText","copy","setCopySuccess","textRef","useRef","textField","current","console","log","useEffect","sessionStorage","getItem","value","copyTimer","setTimeout","clearTimeout","setItem","useSound","Chime","play","className","onClick","e","selection","navigator","clipboard","writeText","id","ref","type","onChange","preventDefault","target","rows","onMouseDown","fetch","method","body","headers","then","res","json","data","text","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAAe,MAA0B,kCCiH1BA,EA5GA,WAAO,IAAD,EACmBC,mBAAS,IAD5B,mBACZC,EADY,KACCC,EADD,OAEYF,mBAAS,QAFrB,mBAEZG,EAFY,KAENC,EAFM,KAKbC,EAAUC,iBAAO,MACjBC,EAAYF,EAAQG,QAC1BC,QAAQC,IAAIH,GAEZI,qBAAU,WACJC,eAAeC,QAAQ,WACzBN,EAAUO,MAAQF,eAAeC,QAAQ,YAK1C,CAACN,IAGJI,qBAAU,WACR,IAAMI,EAAYC,YAAW,WACd,WAATb,GACFC,EAAe,UAEhB,KACH,OAAO,kBAAMa,aAAaF,MACzB,CAACZ,IAGJQ,qBAAU,WACRC,eAAeM,QAAQ,QAASjB,KAK/B,CAACA,IAEJ,IArCmB,EAqDNkB,YAASC,GAAjBC,EArDc,oBAsDnBZ,QAAQC,IAAIT,GAgBZ,OACE,sBAAKqB,UAAU,SAAf,UACE,sBAAKA,UAAU,cAAf,UACA,oBAAIA,UAAU,QAAd,2EAEA,sBAAMA,UAAU,iBAAhB,SAEA,mBACEC,QAhBa,SAACC,GAClB,IAAMC,EAAYxB,EACHyB,UAAUC,UAAUC,UAAUH,IAG3CrB,EAAe,WAYbyB,GAAG,OACHP,UAAU,cAHZ,SAKI,sBAAMA,UAAU,UAAhB,SAA2BnB,WAI/B,sBAAKmB,UAAU,iBAAf,UAEE,0BACEQ,IAAKzB,EACL0B,KAAK,OACLC,SAnCa,SAACR,GACpBA,EAAES,iBACF/B,EAAesB,EAAEU,OAAOpB,QAiCMQ,UAAU,OAClCR,MAAOb,EACPkC,KAAK,MAEP,mBACEN,GAAG,MACHO,YAAaf,EACbE,QA7Da,WACnBc,MAAM,WAAY,CAChBC,OAAQ,OACRC,KAAM,CACJ,QAAW,QAEbC,QAAS,CACP,eAAgB,sBAEjBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAE9B1C,EADe0C,EACOC,UAmDlBvB,UAAU,iCC7FLwB,MARf,WACE,OACE,qBAAKxB,UAAU,gBAAf,SACE,cAAC,EAAD,OCMSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2e84907f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/chime.a952bbb4.wav\";","import React, { useState, useEffect, useRef} from 'react';\r\nimport useSound from 'use-sound';\r\nimport Chime from '../Assets/chime.wav';\r\n\r\n\r\nconst Speech = () => {\r\n  const [currentText, setCurrentText] = useState('');\r\n  const [copy, setCopySuccess] = useState('Copy');\r\n  \r\n  // AUTOSAVE FEATURE W/ SESSION STORAGE\r\n  const textRef = useRef(null);\r\n  const textField = textRef.current;\r\n  console.log(textField);\r\n\r\n  useEffect(() => {\r\n    if (sessionStorage.getItem('First')) {\r\n      textField.value = sessionStorage.getItem('First');\r\n    }\r\n    // textField.addEventListener('change', () => {\r\n    //   sessionStorage.setItem('First', textField.value)\r\n    // })\r\n  }, [textField])\r\n\r\n  // CHANGE COPY SPAN TEXT\r\n  useEffect(() => {\r\n    const copyTimer = setTimeout(() => {\r\n      if (copy === 'Copied') {\r\n        setCopySuccess('Copy')\r\n        }\r\n    }, 2000)\r\n    return () => clearTimeout(copyTimer)\r\n  }, [copy])\r\n\r\n  // Session Storage\r\n  useEffect(() => {\r\n    sessionStorage.setItem('First', currentText)\r\n    // setCurrentText(sessionStorage.getItem('First'))\r\n    \r\n    // return () => sessionStorage.clear();\r\n    \r\n  }, [currentText])\r\n  // HANDLE SPEECH CONVERSION\r\n  const HandleSpeech = () => {\r\n    fetch('/request', {\r\n      method: 'POST',\r\n      body: {\r\n        \"content\": \"true\"\r\n      },\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    }).then(res => res.json()).then(data => {\r\n      const output = data\r\n      setCurrentText(output.text)\r\n    })\r\n  }\r\n\r\n  // SOUND FOR MICROPHONE\r\nconst [play] = useSound(Chime);\r\n  console.log(currentText);\r\n// MAKE TEXT FEILD EDITABLE\r\n  const handleChange = (e) => {\r\n    e.preventDefault()\r\n    setCurrentText(e.target.value)\r\n  }\r\n\r\n// COPY AND PASTE FEATURE\r\n  const handleCopy = (e) => {\r\n    const selection = currentText;\r\n    const Copied = navigator.clipboard.writeText(selection)\r\n\r\n    if (Copied) {\r\n      setCopySuccess('Copied')\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"speech\">\r\n      <div className='speechTitle'>\r\n      <h2 className='title'>Click the microphone and wait half a second before speaking: </h2>\r\n      \r\n      <span className='copy-container'\r\n      >\r\n      <i\r\n        onClick={handleCopy}\r\n        id='copy'\r\n        className=\"far fa-copy\" \r\n        >\r\n          <span className='tooltip'>{copy}</span>\r\n        </i>\r\n      </span>\r\n      </div>\r\n      <div className='speech-wrapper'>\r\n        \r\n        <textarea\r\n          ref={textRef}\r\n          type=\"text\"\r\n          onChange={handleChange} className='text'\r\n          value={currentText}\r\n          rows='5'\r\n        />\r\n        <i\r\n          id=\"mic\"\r\n          onMouseDown={play}\r\n          onClick={HandleSpeech}\r\n          className=\"fas fa-microphone-alt\"\r\n        ></i>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Speech;\r\n","import React from 'react'\r\nimport Speech from './components/speech'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App container'>\r\n      <Speech />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport '../src/Assets/styles/base.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}